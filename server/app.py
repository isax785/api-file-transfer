from datetime import datetime
from flask import Flask, request, send_file
import os

# LOCALHOST = return f'http://127.0.0.1:5000'

CUR_DIR = os.path.dirname(os.path.abspath(__file__))

app = Flask(__name__)

@app.route("/download_dict", methods=['GET'])
def download_dict():
    date = datetime.now().strftime("%d/%m/%Y")
    time = datetime.now().strftime("%H:%M:%S")
    message = f"Message generated by the server in date {date} at {time}."
    return {'message': message}


@app.route("/upload_dict", methods=['POST'])
def upload_dict():
    req = request.get_json()
    text = req['text']
    message = f"Your message '{text}' was rd by the server and returned."
    return {'message': message}


@app.route("/download_file", methods=['GET'])
def download_file():
    "simple download with "
    file_path = os.path.join(CUR_DIR, "res/download_from_server.txt")
    dt = datetime.now().strftime("%d%m%Y-%H%M%S")
    file_name = f"{dt} File from Server"

    return send_file(file_path, as_attachment=True, download_name=file_name) 


@app.route("/upload_file", methods=['POST'])
def upload_file():
    try:
        filepath = request.headers.get('filename')
        filename = filepath.split('/')[-1]
        if filename == "":
            return {"message": "No file was uploaded!"}
        
        file = request.files['file'].read() # byte string literal content 
        file_human = file.decode('utf-8') # decoding for human-readability

        return {"message": f"File {filename} received!\n\nContent:\n\n{str(file_human)}"}
    
    except Exception as e:
        return {"message": f"Server error:\n{e}"}


@app.route("/download_dict_file", methods=['GET'])
def download_dict_file():
    # 1. duplicate file to download
    # 2. create file buffer for transfer
    # 3. delete duplicated file
    # 4. return response

    # CUR_DIR = os.path.dirname(os.path.abspath(__file__))
    # cur_dt =  datetime.now().strftime("%Y%m%d_%H%M%S") # formatted datetime

    # file_name = f"{cur_dt}_custom_table.xlsx"
    # export_folder = os.path.join(CUR_DIR, "src")
    # file_path = os.path.join(export_folder,
    #                         file_name)

    # # template_file_content = open(template_file_path, 'rb').read()
    
    # # with open(file_path, 'wb') as f:
    # #     f.write(template_file_content)

    # compiled_table = CompiledCustomTable(template_file_path, 
    #                                         ch_models_selected, 
    #                                         export_folder)


    # file = open(file_path, 'rb').read()

    # # create a buffer of the file to be uploaded
    # file_buffer = BytesIO()
    # file_buffer.write(file)
    # file_buffer.seek(0)  # Reset the buffer position to the beginning
    
    # os.remove(file_path) # delete the file

    # return send_file(file_buffer, as_attachment=True, download_name=file_name)

    pass


@app.route("/upload_dict_file", methods=['POST'])
def upload_dict_file():
    # 1. retieve both file and message
    # 2. save the file with the time/date then delete it
    # 2. return the message that confirms that everything has been received and the date/time filename

    pass


if __name__ == "__main__":
    app.run(debug=True) # autoupdate
    # app.run() # for running debug (VSCode)
